# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
"""A dnf plugin to authenticate access to an Azure Blob Storage repository."""

import logging
import os
import dnf
import re


log = logging.getLogger("dnf.plugin.azure_auth")


class AzureAuthenticator(dnf.Plugin):
    name = "azure_auth"

    def __init__(self, base, cli):
        super(AzureAuthenticator, self).__init__(base, cli)
        self.base = base
        self.cli = cli

    def config(self):
        # There are four storage endpoints for Azure Blob Storage:
        # - core.windows.net
        # - core.chinacloudapi.cn
        # - core.usgovcloudapi.net
        # - core.cloudapi.de
        pattern = re.compile(
            "^https://(rpmrepo(?:[a-z0-9]+)).blob.(?:core.windows.net|core.chinacloudapi.cn|core.usgovcloudapi.net|core.cloudapi.de)/packages"
        )

        for repo_key, repo in self.base.repos.items():
            # Check to see if the repository baseurl is an Azure Blob Storage URL
            # generated by rpm-package-function.
            for base_url in repo.baseurl:
                log.debug("Base URL: %r", base_url)

                m = pattern.match(base_url)
                if m:
                    # The repository baseurl is an Azure Blob Storage URL.
                    # Convert the storage account to uppercase
                    storage_account = m.group(1).upper()
                    token_name = f"AZURE_STORAGE_TOKEN_{storage_account}"

                    # Look for an authentication token in the environment that
                    # matches the token.
                    if token_name in os.environ:
                        token = os.environ[token_name]
                        log.info("Using Azure authentication for %s", repo_key)
                        repo.set_http_headers(
                            [
                                "x-ms-version: 2022-11-02",
                                f"Authorization: Bearer {token}",
                            ]
                        )
